// Generated by CoffeeScript 1.3.3
(function() {
  var async, config, getInfo, getSysInfo, putVote, rc, restify, server;

  config = require("./config");

  async = require("async");

  restify = require("restify");

  server = restify.createServer({
    name: 'APOD-Server'
  });

  rc = require("redis").createClient();

  getSysInfo = function(req, res, next) {
    res.header("Content-Type", "text/plain");
    return async.parallel({
      info: function(callback) {
        return rc.info(function(err, reply) {
          return callback(null, reply);
        });
      },
      top: function(callback) {
        return rc.zrevrange("apod:rank", 0, -1, function(err, reply) {
          return callback(null, reply);
        });
      }
    }, function(err, results) {
      var body;
      body = results.info + "\r\r" + results.top;
      res.header("Content-Length", Buffer.byteLength(body));
      return res.send(body);
    });
  };

  getInfo = function(req, res, next) {
    var key_id;
    key_id = "apod:" + req.params.photoid;
    return async.parallel({
      score: function(callback) {
        return rc.zscore("apod:rank", key_id, function(err, reply) {
          return callback(null, reply);
        });
      }
    }, function(err, results) {
      return res.send(results.score);
    });
  };

  putVote = function(req, res, next) {
    var key_id, key_score, key_votes;
    key_id = "apod:" + req.params.photoid;
    key_votes = key_id + ":votes";
    key_score = key_id + ":total_score";
    rc.incr(key_votes);
    rc.incrby(key_score, req.params.score);
    async.parallel({
      votes: function(callback) {
        return rc.get(key_votes, function(err, reply) {
          return callback(null, reply);
        });
      },
      score: function(callback) {
        return rc.get(key_score, function(err, reply) {
          return callback(null, reply);
        });
      }
    }, function(err, results) {
      var avg;
      avg = results.score / results.votes;
      return rc.zadd("apod:rank", avg, key_id);
    });
    return res.send('0');
  };

  server.use(restify.bodyParser());

  server.use(restify.queryParser());

  server.get("/sysinfo", getSysInfo);

  server.get("/info/:photoid", getInfo);

  server.put("/vote/:photoid/:score", putVote);

  server.listen(config.web.port, function() {
    return console.log("%s listening at %s", server.name, server.url);
  });

}).call(this);
